/**
This code has web server and Temperature Humidity functionality

According to WHO, ideal indoor temperature should be between 18 to 24 degrees Celsius
Therefore, we will be using the median of 21 degrees Celsius in calculations.
Setting 1: 18 C
Setting 2: 19 C
Setting 3: 22 C
Setting 4: 23 C
Auto: 21 C 
*/

// Load Wi-Fi library
#include <WiFi.h>
#include <Wire.h>

// Load Temp and Humidity sensor library
#include "HIH61xx.h"
// #include "SSD1306Wire.h"

HIH61xx<TwoWire> hih(Wire);
#define BYTES2READ (4)
#define HIH8121addr (0x27)
#define EPOCH (0.1) // 10 seconds between reads

const float c1 = -8.78469475556;
const float c2 = 1.61139411;
const float c3 = 2.33854893989;
const float c4 = -0.14611605;
const float c5 = -0.012308094;
const float c6 = -0.0164248277778;
const float c7 = 0.002211732;
const float c8 = 0.00072546;
const float c9 = -0.000003582;

// Replace with your network credentials
const char* ssid = "iPhone";
const char* password = "Rahil870";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String led1State = "off";
String led2State = "off";

// Assign output variables to GPIO pins
const int led1 = 21;
const int led2 = 20;
const int outputPIR = 5;
const int sensorPin = 4;

unsigned long currentTime = millis();
unsigned long previousTime = 0; 
const long timeoutTime = 2000;

unsigned long lastTrigger = millis();
const long PIRTimeout = 5 * 1000; // 3 second timeout for presence detection
int overridePIR = 0;

void setup() {
  Serial.begin(115200);
  // Initialize the output variables as outputs
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(outputPIR, OUTPUT);
  pinMode(sensorPin, INPUT);
  // Set outputs to LOW
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
  digitalWrite(outputPIR, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  Wire.begin();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  WiFiClient client = server.available();   // Listen for incoming clients
  int dummydata = 0xff;
  bool state = digitalRead(sensorPin);
  unsigned int sample = 1;
  unsigned int RHraw, Tempraw; // raw RH (%) and temp (c) values
  float RH, TempC;  // converted RH (%) and Temp (C)
  int HIHdata[4];  // data read from the sensor
  int HIHstatus;  // sensor status bits
  if (overridePIR == 0) {
    if (state) {
      // Serial.println("Found someone!");
      lastTrigger = millis();
      digitalWrite(outputPIR, HIGH);
    } else if (!state) {
      // Serial.println("No one here");
      // digitalWrite(outputPIR, LOW);
    }
  }

  int th_data[4];
  int th_status;
  unsigned int in_humidity, in_temp;
  float humidity, temp;
  

  delay(500);

  if (millis() - lastTrigger > PIRTimeout) {
    digitalWrite(outputPIR, LOW);
  }

  Wire.beginTransmission(HIH8121addr);
      Wire.write(dummydata);
      Wire.endTransmission();
      delay(50);

      Wire.requestFrom(HIH8121addr, BYTES2READ);
      HIHdata[0] = Wire.read();
      HIHdata[1] = Wire.read();
      HIHdata[2] = Wire.read();
      HIHdata[3] = Wire.read();
      // HIHdata[0] = 1;
      // HIHdata[1] = 1;
      // HIHdata[2] = 1;
      // HIHdata[3] = 1;
      HIHstatus = HIHdata[0] & 0b11000000;  // get status bits
      if (HIHstatus != 0) {
        Serial.println("Status Bits Error!");
      }
      HIHdata[0] = HIHdata[0] & 0b00111111;  //mask status
      Tempraw = (HIHdata[2] * 256) + HIHdata[3];
      Tempraw = Tempraw / 4;  //shift temperature
      RHraw = (HIHdata[0] * 256) + HIHdata[1];
      RH = ((float)RHraw / 16382.0) * 100.0;
      TempC = (((float)Tempraw / 16382.0) * 165.0) - 40;
      Serial.print(sample);
      Serial.print("  ");
      Serial.print(RH);
      Serial.print("  ");
      Serial.print(TempC);
      Serial.println();
      float heat_index = c1 + c1*TempC + c3*RH + c4*TempC*RH + c5*pow(TempC, 2) + c6*pow(RH, 2) + c7*pow(TempC, 2)*RH + c8*TempC*pow(RH, 2) + c9*pow(TempC, 2)*pow(RH, 2); 
      Serial.print("Heat index: ");
      Serial.println(heat_index);

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          
    String currentLine = "";         
    Serial.println("Also testing temperature and humidity sensor");        
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected

      currentTime = millis();

      Wire.beginTransmission(HIH8121addr);
      Wire.write(dummydata);
      Wire.endTransmission();
      delay(50);

      Wire.requestFrom(HIH8121addr, BYTES2READ);
      // HIHdata[0] = Wire.read();
      // HIHdata[1] = Wire.read();
      // HIHdata[2] = Wire.read();
      // HIHdata[3] = Wire.read();
      HIHdata[0] = 1;
      HIHdata[1] = 1;
      HIHdata[2] = 1;
      HIHdata[3] = 1;
      HIHstatus = HIHdata[0] & 0b11000000;  // get status bits
      if (HIHstatus != 0) {
        Serial.println("Status Bits Error!");
      }
      HIHdata[0] = HIHdata[0] & 0b00111111;  //mask status
      Tempraw = (HIHdata[2] * 256) + HIHdata[3];
      Tempraw = Tempraw / 4;  //shift temperature
      RHraw = (HIHdata[0] * 256) + HIHdata[1];
      RH = ((float)RHraw / 16382.0) * 100.0;
      TempC = (((float)Tempraw / 16382.0) * 165.0) - 40;
      Serial.print(sample);
      Serial.print("  ");
      Serial.print(RH);
      Serial.print("  ");
      Serial.print(TempC);
      Serial.println();
      float heat_index = c1 + c1*TempC + c3*RH + c4*TempC*RH + c5*pow(TempC, 2) + c6*pow(RH, 2) + c7*pow(TempC, 2)*RH + c8*TempC*pow(RH, 2) + c9*pow(TempC, 2)*pow(RH, 2); 
      sample++;
      if (client.available()) {             
        char c = client.read();            
        Serial.write(c);                   
        header += c;
        if (c == '\n') {                    // check for end of HTTP request
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            if (header.indexOf("GET /One") >= 0) {
              Serial.println("Setting 1 on");
              led1State = "off";
              led2State = "off";
              digitalWrite(led1, LOW);
              digitalWrite(led2, LOW);
            } else if (header.indexOf("GET /Two") >= 0) {
              Serial.println("Setting 2 off");
              led1State = "on";
              led2State = "off";
              digitalWrite(led1, HIGH);
              digitalWrite(led2, LOW);
            } else if (header.indexOf("GET /Three") >= 0) {
              Serial.println("Setting 3 on");
              led1State = "off";
              led2State = "on";
              digitalWrite(led1, LOW);
              digitalWrite(led2, HIGH);
            } else if (header.indexOf("GET /Four") >= 0) {
              Serial.println("Setting 4 off");
              led1State = "on";
              led2State = "on";
              digitalWrite(led1, HIGH);
              digitalWrite(led2, HIGH);
            } else if (header.indexOf("GET /InHome") >= 0) {
              overridePIR = 1;
              digitalWrite(outputPIR, HIGH);
            } else if (header.indexOf("GET /InHome") < 0) {
              overridePIR = 0;
            }
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1>ESP32 Web Server</h1>");

            // Display buttons for each variable
            client.println("<p><a href=\"/One\"><button class=\"button\">Off Both LEDs</button></a></p>");
            client.println("<p><a href=\"/Two\"><button class=\"button\">On 1, Off 2</button></a></p>");
            client.println("<p><a href=\"/Three\"><button class=\"button\">On 2, Off 1</button></a></p>");
            client.println("<p><a href=\"/Four\"><button class=\"button\">On Both LEDs</button></a></p>");
            client.println("<p><a href=\"/InHome\"><button class=\"button\">I'm Home!</button></a></p>");
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  
          currentLine += c;     
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}

